#!/usr/bin/env python3

import sys, os, subprocess, tempfile
fsenc = sys.getfilesystemencoding()

# let's get prepared, check if everything is in workingstate
if len(sys.argv) < 0: sys.exit()

target = sys.argv[1]

if not os.path.exists(target):
	print("cannot find what you gave me", file=sys.stderr)
	sys.exit(1)



# read out existing xattrs
xattrs = os.listxattr(target)

userxattrs = [
		( attr.split('.', 1)[1], os.getxattr(target, attr).decode(fsenc) )
		for attr in xattrs
		if attr.startswith('user.')
		]

otherxattrs = [
		( attr, os.getxattr(target, xattr).decode(fsenc) )
		for attr in xattrs
		if not attr.startswith('user.')
		]

tmpfile = tempfile.NamedTemporaryFile()


# present current attributes
with open(tmpfile.name, 'w') as f:

	f.write("# attributes in namespace 'user':\n\n")
	f.write("\n".join([ "{0:10}   : {1}".format(key, value) for key, value in userxattrs]))

	if len(otherxattrs) > 0:
		f.write("\n"*3)
		f.write("# attributes in other namespaces:\n\n")
		f.write("\n#".join([ "{0:10}   : {1}".format(key, value) for key, value in otherxattrs]))


# let the user change those attributes
retval = subprocess.call([os.environ['EDITOR'] or 'nano', tmpfile.name])
if retval != 0:
	print("!! Your editor {0} exited nonzero with {1}, removing stale tmpfile and aborting".format(os.environ['EDITOR'], retval), file=sys.stderr)
	sys.exit(1)


# parse and apply the user's changes
with open(tmpfile.name, 'r') as f:
	try:
		# perform simple syntax-check beforehand to print more helpful errors, just in case
		malformedLines = [line.strip() for line in f if line.strip() != "" and not line.startswith('#') and not ':' in line]
		if len(malformedLines) > 0:
			print("!! aborting, malformed lines in file:", file=sys.stderr)
			for line in malformedLines:
				print(">> " + line, file=sys.stderr)
				sys.exit(3)

		f.seek(0)

		# now parse the file
		newuserxattrlist = [line.strip().split(':') for line in f if line.strip() != "" and not line.startswith('#')]
		newuserxattrs = [( key.strip(), value.strip() ) for key, value in newuserxattrlist]

	except UnicodeDecodeError:
		print("Errors parsing the file, aborting. Did you screw up the syntax?", file=sys.stderr)
		sys.exit(2)

	# now update the changed attributes
	changed = [] #remember changed properties for deletion procedure
	for key, value in set(newuserxattrs).difference(set(userxattrs)):
		print(":: updating {0}".format(key))
		try:
			changed.append(key)
			os.setxattr(target, 'user.' + key, value.encode(fsenc))
		except UnicodeEncodeError:
			print("!! error encoding {0} : {1}".format(key, value))

	# now delete all properties that are left over
	for key, _ in set(userxattrs).difference(set(newuserxattrs)): # set of all changed and removed attributes
		if key not in changed: # then the attribute vanished or key changed
			print(":: removing {0}".format(key))
			os.removexattr(target, 'user.' + key)

